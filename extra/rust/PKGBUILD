# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>

# ALARM: Kevin Mihelich <kevin@archlinuxarm.org>
#  - add a link to g++ to compensate for broken cross-compiler decisions
#  - build v6/v7 with -j2 - RAM constraints
#  - set llvm-config in config.toml for ARM architectures
#  - set debuginfo-level = 0 in config.toml - RAM constraints

buildarch=28
highmem=1

# Remember to bump lib32-rust as well!

pkgname=('rust' 'rust-docs')
epoch=1
pkgver=1.38.0
pkgrel=1

_llvm_ver=8.0.1

pkgdesc='Systems programming language focused on safety, speed and concurrency'
url='https://www.rust-lang.org/'
arch=('x86_64')
license=('MIT' 'Apache')

makedepends=('rust' "llvm=$_llvm_ver" 'libffi' 'perl' 'python' 'curl' 'cmake')
checkdepends=('procps-ng' 'gdb')

options=('!emptydirs')

source=("https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
        "https://github.com/llvm/llvm-project/releases/download/llvmorg-$_llvm_ver/compiler-rt-$_llvm_ver.src.tar.xz"{,.sig}
        0001-WIP-minimize-the-rust-std-component.patch
        config.toml)

sha256sums=('644263ca7c7106f8ee8fcde6bb16910d246b30668a74be20b8c7e0e9f4a52d80'
            'SKIP'
            '11828fb4823387d820c6715b25f6b2405e60837d12a7469e7a8882911c721837'
            'SKIP'
            '1d6b69444ef6ff033fe1612e56ecdaad5c52aa44395e704f78b1a047c65b9321'
            '27ac00c9e3a1daeed7b5d343cd7ef45c98a348e6d9178b4d7a501d97eb16e5c7')
validpgpkeys=('108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE'  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
              '474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard <tstellar@redhat.com>

prepare() {
  cd "rustc-$pkgver-src"

  # For https://bugzilla.redhat.com/show_bug.cgi?id=1756487
  # From https://src.fedoraproject.org/rpms/rust/tree/master
  patch -Np1 -i ../0001-WIP-minimize-the-rust-std-component.patch

  cp "$srcdir"/config.toml config.toml

  if [[ $CARCH == armv7h ]]; then
    mkdir path
    ln -s /usr/bin/g++ path/arm-linux-gnueabihf-g++
    export PATH="$srcdir/path:$PATH"
  fi
  if [[ $CARCH == armv7h || $CARCH == armv6h ]]; then
    jobs="-j 2"
  fi
}

build() {
  cd "rustc-$pkgver-src"

  export RUST_BACKTRACE=1
  export RUST_COMPILER_RT_ROOT="$srcdir/compiler-rt-$_llvm_ver.src"

  python ./x.py build $jobs
}

package_rust() {
  depends=('gcc-libs' 'llvm-libs' 'curl' 'libssh2')
  provides=('cargo' 'rustfmt')
  conflicts=('cargo' 'rustfmt')
  replaces=('cargo' 'rustfmt')

  cd "rustc-$pkgver-src"

  DESTDIR="$pkgdir" python ./x.py install

  install -Dm644 -t "$pkgdir/usr/share/licenses/$pkgname" LICENSE*

  # delete unnecesary files, e.g. components and manifest files only used for the uninstall script
  cd "$pkgdir"/usr/lib/rustlib
  rm components install.log manifest-* rust-installer-version uninstall.sh

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
  ln -srft "$pkgdir"/usr/lib x86_64-unknown-linux-gnu/lib/*.so

  # move docs out of the way for splitting
  mv "$pkgdir"/usr/share/doc "$srcdir"

  install -d "$pkgdir"/usr/share/bash-completion
  mv "$pkgdir"/etc/bash_completion.d/ "$pkgdir"/usr/share/bash-completion/completions/
}

package_rust-docs() {
  description=('Documentation for the Rust programming language')

  cd "rustc-$pkgver-src"
  install -Dm644 -t "$pkgdir/usr/share/licenses/$pkgname" LICENSE*

  mv "$srcdir"/doc "$pkgdir"/usr/share/doc
}

# vim:set ts=2 sw=2 et:
